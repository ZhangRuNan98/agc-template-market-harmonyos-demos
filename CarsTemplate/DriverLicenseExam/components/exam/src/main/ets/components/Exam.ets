import { ExamDetail, ExamManager } from '../model/QuestionAnswerRecord';
import { SelectComponent } from './SelectComponent';
import { CustomContentDialog } from '@kit.ArkUI';
import { ExamController } from '../controller/ExamController';
import { JSON } from '@kit.ArkTS';

// 设置 和 模拟考试时按返回键时打开弹窗
let examController: ExamController = ExamController.instance;

@ComponentV2
export struct Exam {
  @Param @Require appPathStack: NavPathStack;
  @Param @Require examManager: ExamManager;
  // 记录模拟考试分数回调, 用于计算模拟考试平均分
  @Param mockExamCall: (score: number) => void = (score: number) => {};
  // 监听monitor中isShowMockExamDialog的变化
  private examController: ExamController = ExamController.instance;
  // 显示剩余时间
  @Local remainTime: number = 0;
  // 是否显示答题卡
  @Local isShowProblemListSheet: boolean = false;
  // 记录当前是第几题
  @Local currentIndex: number = 0;
  // 模拟考试-暂停考试/继续考试
  @Local isStop: boolean = false;

  @Monitor('examController.isShowMockExamDialog')
  mockExamDialogChange() {
    if (examController.isShowMockExamDialog) {
      examController.isShowMockExamDialog = false;
      this.isStop = true;
      this.mockExamDialog.open();
    }
  }

  aboutToAppear(): void {
    this.currentIndex = this.examManager.currentQuestionId + 1;

    if (this.examManager.timeLimit !== 0) {
      this.remainTime = this.examManager.timeLimit * 60;
      let showDialog: boolean = true;
      setInterval(() => {
        if (showDialog && !this.isStop) {
          if (this.remainTime >= 1) {
            this.remainTime--;
          } else {
            showDialog = false;
            this.isStop = true;
            this.mockExamDialog.open();
          }
        }

      }, 1000); // 1秒触发一次
    }
  }

  // 如果想退出考试重新进入后将已做题回显，去掉这个方法
  aboutToDisappear(): void {
    this.examManager.clearSelectedOption();
  }

  build() {
    Column() {
      // 模拟考试-展示剩余时间
      this.showRemainTime();

      Swiper(examController.swiperController) {
        ForEach(this.examManager.examDetails, (item: ExamDetail, examIndex: number) => {
          Column({ space: 12 }) {
            SelectComponent({
              item: item,
              // 如果想退出考试重新进入后将已做题回显，打开这个参数
              // isReDisplay: item.selected.length !== 0,
              changeCorrectNum: (isAdd: boolean) => {
                isAdd ? this.examManager.correctNumber++ : this.examManager.correctNumber--;
              },
              changeErrorNum: (isAdd: boolean) => {
                isAdd ? this.examManager.errorNumber++ : this.examManager.errorNumber--;
              },
            });
          };
        }, (item: ExamDetail) => JSON.stringify(item.id));
      }
      .index(this.examManager.currentQuestionId)
      .height('100%')
      .autoPlay(false)
      .loop(false)
      .indicator(false)
      .onChange((targetIndex: number) => {
        this.examManager.currentQuestionId = targetIndex;
        this.currentIndex = targetIndex + 1;
      })
      .padding({
        top: 12,
        bottom: this.examManager.timeLimit === 0 ? 92 : 92 + 48,
      });

      this.bottomBar();
    }
    .width('100%')
    .height('100%')
    .backgroundColor('#F1F3F5');
  }

  @Builder
  showRemainTime() {
    Row({ space: 12 }) {
      Image($r('app.media.clock'))
        .width(24)
        .height(24);

      Text('剩余时间')
        .fontSize(12)
        .fontColor('#64BB5C');

      Text(this.convertToTime(this.remainTime))
        .fontSize(16)
        .fontColor('#64BB5C');
    }
    .height(48)
    .visibility(this.examManager.timeLimit === 0 ? Visibility.None : Visibility.Visible);
  }

  // 答题卡-点击显示清除数据弹窗
  clearRecordsController: CustomDialogController = new CustomDialogController({
    builder: CustomContentDialog({
      primaryTitle: '温馨提示',
      contentBuilder: () => {
        this.clearRecords();
      },
      buttons: [
        {
          value: '取消',
          buttonStyle: ButtonStyleMode.TEXTUAL,
          action: () => {
          },
        },
        {
          value: '确定',
          buttonStyle: ButtonStyleMode.TEXTUAL,
          role: ButtonRole.ERROR,
          action: () => {
            this.examManager.clearRecords();
            examController.swiperController.changeIndex(this.examManager.currentQuestionId);
            this.examController.renderView = !this.examController.renderView;
            this.isShowProblemListSheet = !this.isShowProblemListSheet;
          },
        },
      ],
    }),
  });
  mockExamDialog: CustomDialogController = new CustomDialogController({
    builder: () => {
      this.mockExamBuilder();
    },
    autoCancel: false,
  });

  @Builder
  mockExamBuilder() {
    Column() {
      Text(this.calcExamScore() ? '成绩合格' : '成绩不合格')
        .fontSize(20)
        .fontColor(this.calcExamScore() ? '#64BB5C' : '#E84026')
        .fontWeight(FontWeight.Bold)
        .padding({
          top: 15,
        });

      Flex({ justifyContent: FlexAlign.SpaceAround }) {
        Text('未答题数: ' + (this.examManager.total - this.examManager.correctNumber - this.examManager.errorNumber))
          .fontSize(16)
          .fontColor('rgba(0,0,0,0.90)');

        Text('考试成绩: ' + this.examManager.correctNumber + '分')
          .fontSize(16)
          .fontColor('rgba(0,0,0,0.90)');
      }
      .padding({
        top: 27,
        bottom: 27,
      })
      .width('100%');

      Flex({ justifyContent: FlexAlign.SpaceAround }) {
        Row() {
          Text('继续考试')
            .fontSize(16)
            .fontColor('#64BB5C')
            .fontWeight(FontWeight.Medium);
        }
        .justifyContent(FlexAlign.Center)
        .onClick(() => {
          this.isStop = false;
          this.mockExamDialog.close();
        })
        .width('50%')
        .visibility(this.remainTime > 0 ? Visibility.Visible : Visibility.None);

        Row() {
          Text('现在交卷')
            .fontSize(16)
            .fontColor('rgba(0,0,0,0.40)')
            .fontWeight(FontWeight.Medium);
        }
        .justifyContent(FlexAlign.Center)
        .onClick(() => {
          this.isStop = false;
          this.mockExamDialog.close();
          this.mockExamCall(this.examManager.correctNumber);
          this.appPathStack.pop();
        })
        .width('50%');
      }
      .width('100%');
    }
    .backgroundColor(Color.White)
    .width('100%')
    .height(164);
  }

  // 模拟考试-计算考试成绩是否合格
  calcExamScore(): boolean {
    return this.examManager.total * 0.9 <= this.examManager.correctNumber;
  }

  /**
   * 底部栏视图（正确与错误数量，答题卡入口，是否收藏）
   */
  @Builder
  bottomBar() {
    Row() {
      Image($r('app.media.correct'))
        .width(16)
        .height(16)
        .margin({
          right: '1%',
        });

      Text(String(this.examManager.correctNumber));

      Image($r('app.media.error'))
        .width(16)
        .height(16)
        .margin({
          left: '3%',
          right: '1%',
        });

      Text(String(this.examManager.errorNumber))
        .margin({
          right: '7%',
        });

      Row() {
        Image($r('app.media.exam_list'))
          .width(16)
          .height(16)
          .margin({
            right: '1%',
          });
        Text(`${this.currentIndex}/${this.examManager.total}`);
      }
      .onClick(() => {
        this.isShowProblemListSheet = !this.isShowProblemListSheet;
      })
      .bindSheet($$this.isShowProblemListSheet, this.showProblemListSheet(), {
        height: '80%',
        width: '100%',
        title: { title: '答题卡' },
        backgroundColor: Color.White,
      });

      Blank();

      Row() {
        Image(this.examManager.examDetails.length > 0 && this.examManager.examDetails[this.currentIndex-1].isCollect ?
        $r('app.media.has_been_marked') :
        $r('app.media.not_marked'))
          .width(24)
          .height(24)
          .margin({
            right: '1%',
          });

        Text('收藏')
          .fontSize(12)
          .fontColor('rgba(0,0,0,0.90)');
      }
      .onClick(() => {
        this.examManager.examDetails[this.currentIndex-1].isCollect =
          !this.examManager.examDetails[this.currentIndex-1].isCollect;
      });

      Row() {
        Image($r('app.media.bell'))
          .width(16)
          .height(16);
        Text('交卷')
          .fontColor(Color.White)
          .fontSize(12);
      }
      .justifyContent(FlexAlign.Center)
      .backgroundColor('#64BB5C')
      .borderRadius(8)
      .width(76)
      .height(28)
      .margin({
        left: '3%',
        top: -3,
      })
      .onClick(() => {
        this.isStop = true;
        this.mockExamDialog.open();
      })
      .visibility(this.examManager.timeLimit === 0 ? Visibility.None : Visibility.Visible);
    }
    .backgroundColor(Color.White)
    .width('100%')
    .height(76)
    .alignItems(VerticalAlign.Top)
    .padding({
      top: 16,
      left: '4%',
      right: '4%',
    })
    .position({
      bottom: 0,
    });
  }

  /**
   * 答题卡视图
   */
  @Builder
  showProblemListSheet() {
    Column() {
      Grid() {
        ForEach(this.examManager.examDetails, (item: ExamDetail, index: number) => {
          GridItem() {
            Stack() {
              Row() {
              }
              .width('100%')
              .width(40)
              .height(40)
              .borderRadius(20)
              .backgroundColor(this.getBgColorByIsCorrect(item.isCorrect));

              Text(String(index + 1))
                .fontColor(item.isCorrect === undefined ? 'rgba(0,0,0,0.90)' : Color.White);
            };
          }
          .onClick(() => {
            this.currentIndex = index + 1;
            this.examManager.currentQuestionId = index;
            examController.swiperController.changeIndex(index);
            this.isShowProblemListSheet = !this.isShowProblemListSheet;
          });
        }, (item: ExamDetail) => JSON.stringify(item.isCorrect));
      }
      .rowsGap(16)
      .columnsTemplate('repeat(auto-stretch, 69)')
      .height('75%')
      .scrollBar(BarState.Off);

      Button('清空记录')
        .fontSize(16)
        .fontColor(Color.White)
        .fontWeight(FontWeight.Medium)
        .backgroundColor('#64BB5C')
        .height(40)
        .width('78%')
        .margin({
          top: 40,
          bottom: 30,
        })
        .onClick(() => {
          this.clearRecordsController.open();
        });
    }
    .padding({
      left: '2%',
      right: '2%',
    })
    .width('100%');
  }

  /**
   * 答题卡-显示对、错和未答题的背景色
   * @param isCorrect
   * @returns
   */
  getBgColorByIsCorrect(isCorrect: boolean | undefined): string {
    if (isCorrect === undefined) {
      return '#F1F3F5';
    }
    return isCorrect ? '#64BB5C' : ' #E84026';
  }

  /**
   * 清除记录弹窗视图
   */
  @Builder
  clearRecords() {
    Row() {
      Text('确定要清空当前操作记录吗');
    }
    .justifyContent(FlexAlign.Center)
    .width('100%');
  }

  /**
   * 时间转换-将剩余秒数转换为 mm:ss
   * @param time
   * @returns
   */
  convertToTime(time: number): string {
    let minute: number = Math.floor(time / 60);
    let second: number = time % 60;
    return (minute < 10 ? '0' + minute : minute + '') + ':' + (second < 10 ? '0' + second : second) + '';
  }
}


@Builder
export function showSettingSheet() {
  Column({ space: 20 }) {
    Row() {
      Text('答对自动下一题')
        .fontSize(16)
        .fontColor('rgba(0,0,0,0.90)');
      Blank();
      Toggle({ type: ToggleType.Switch, isOn: examController.showNext })
        .selectedColor($r('sys.color.comp_background_emphasize'))
        .onChange((isOn: boolean) => {
          if (isOn) {
            examController.showNext = true;
            return;
          }
          examController.showNext = false;
        });
    }
    .width('100%')
    .padding({
      top: 5,
    });

    Row() {
      Text('字体大小')
        .fontSize(10)
        .fontColor('rgba(0,0,0,0.90)');
      Blank();
      Row() {
        Slider({
          value: examController.fontSize,
          min: 14, //滑动最小值
          max: 22, //滑动最大值
          step: 2, //步长
          style: SliderStyle.OutSet,
        })
          .stepColor('rgba(0,0,0,0.40)')
          .trackColor('rgba(0,0,0,0.20)')
          .selectedColor('rgba(0,0,0,0.20)')
          .showSteps(true)
          .blockStyle({ type: SliderBlockType.IMAGE, image: $r('app.media.font_setting') })
          .blockSize({ width: 16, height: 16 })
          .onChange((value: number, mode: SliderChangeMode) => {
            examController.fontSize = value;
          });
      }
      .width('70%');

      Blank();

      Text('字体大小')
        .fontSize(16)
        .fontColor('rgba(0,0,0,0.90)');
    }
    .width('100%');
  }
  .height('100%')
  .margin({
    left: '4%',
    right: '4%',
  });
}