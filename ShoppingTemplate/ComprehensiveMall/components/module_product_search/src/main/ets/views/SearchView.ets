import { Constants } from '../commons/Constants';
import { HistorySearch } from '../components/HistorySearch';
import { SearchVM } from '../viewmodels/SearchVM';
import { curves, LengthMetrics } from '@kit.ArkUI';
import { HotSearchItem } from '../commons/Types';
import { SearchBar } from '../components/SearchBar';

@ComponentV2
export struct SearchView {
  @Param
  defaultSearch: string = '';
  @Param
  routerStack: NavPathStack = new NavPathStack();
  @Event
  handleSearch: (value: string) => void = () => {
  };
  @Local
  animate: boolean = false;
  @Local
  refreshRotateVal: number = 0;
  vm: SearchVM = new SearchVM();
  controller: SearchController = new SearchController();

  aboutToAppear(): void {
    this.vm.initData();
    this.vm.searchWords = this.defaultSearch;
  }

  build() {
    Column() {
      SearchBar({
        searchWords: this.vm.searchWords,
        clickBack: () => {
          this.routerStack?.pop?.();
        },
        updateSearchWords: (value) => {
          this.vm.updateSearchWords(value);
        },
        submitSearch: () => {
          this.vm.submitSearch(this.getUIContext(), this.handleSearch);
        },
      });
      Scroll() {
        if (this.vm.isLoading) {
          LoadingProgress().width(32).height(32);
        } else {
          Column({
            space: 16,
          }) {
            HistorySearch({
              historyList: this.vm.historyList,
              handleClickItem: (value) => {
                this.vm.updateSearchWords(value);
              },
              updateList: (list) => {
                this.vm.updateHistoryList(list);
              },
            });
            this.guessLikeBuilder();
            this.hotSearchBuilder();
          };
        }
      }
      .layoutWeight(1)
      .width('100%')
      .align(Alignment.Top)
      .padding(Constants.SPACE_L);
    }
    .expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.BOTTOM])
    .backgroundColor(Constants.BACKGROUND_COLOR_GREY);
  }

  @Builder
  guessLikeBuilder() {
    Column() {
      Row() {
        Text('猜你想搜')
          .fontSize(14)
          .fontColor(Constants.FONT_COLOR_LEVEL2);

        Image($r('app.media.ic_refresh'))
          .width(16)
          .height(16)
          .rotate({ angle: this.refreshRotateVal })
          .onClick(() => {
            this.getUIContext()?.animateTo({ curve: curves.springMotion() }, () => {
              this.animate = !this.animate;
              this.refreshRotateVal = this.animate ? 360 : 0;
            });
            this.vm.getGuessLikeList();
          });
      }
      .width('100%')
      .justifyContent(FlexAlign.SpaceBetween)
      .margin({ bottom: Constants.SPACE_L });

      Flex({ wrap: FlexWrap.Wrap, space: { main: LengthMetrics.vp(8), cross: LengthMetrics.vp(8) } }) {
        ForEach(this.vm.guessLikeList, (item: string) => {
          Text(item)
            .fontColor(Constants.FONT_COLOR_LEVEL1)
            .fontSize(14)
            .fontWeight(FontWeight.Medium)
            .maxLines(1)
            .textOverflow({ overflow: TextOverflow.Ellipsis })
            .width('45%')
            .flexShrink(0)
            .onClick(() => {
              this.vm.updateSearchWords(item);
            });
        }, (item: string, index: number) => index + '__' + item);
      }
      .padding({ left: Constants.SPACE_M, right: Constants.SPACE_M });

    };
  }

  @Builder
  hotSearchBuilder() {
    Column() {
      Row() {
        Image($r('app.media.ic_hot_search'))
          .width(24)
          .height(24)
          .margin({ right: Constants.SPACE_XS });
        Text('热搜榜')
          .fontSize(18)
          .fontColor(Constants.FONT_COLOR_LEVEL1)
          .fontWeight(FontWeight.Bold);
      };

      ForEach(this.vm.hotSearchList, (item: HotSearchItem, index: number) => {
        Row() {
          Text() {
            Span(`${index + 1}. `)
              .fontColor(index < 3 ? Constants.THEME_COLOR : Constants.FONT_COLOR_LEVEL1);
            Span(item.label);
          }
          .fontSize(14)
          .fontColor(Constants.FONT_COLOR_LEVEL1)
          .width('75%')
          .maxLines(1)
          .textOverflow({ overflow: TextOverflow.Ellipsis });

          Text('热度 ' + item.hotRate)
            .fontSize(14)
            .fontColor(Constants.FONT_COLOR_LEVEL2);
        }
        .width('100%')
        .justifyContent(FlexAlign.SpaceBetween)
        .margin({ top: Constants.SPACE_L })
        .onClick(() => {
          this.vm.updateSearchWords(item.label);
        });
      }, (item: HotSearchItem, index: number) => index + '__' + item.label);
    }
    .alignItems(HorizontalAlign.Start)
    .margin({ top: Constants.SPACE_S })
    .width('100%');
  }
}