import { CommonConstants, SettingModel, TimeUtils } from 'lib_common'
import { LayoutParams, PostImgList } from 'lib_news_api'
import { PersistenceV2, UIUtils } from '@kit.ArkUI'
import { Highlight } from 'module_highlight'
import { AuthorCard } from '../builder/AuthorBuilder'
import { CardViewModel } from '../viewModel/CardViewModel'

@Builder
export function LeftTextRightImageCard(cardData: LayoutParams) {
  NativeComponent({
    cardData: cardData,
  })
}

@ComponentV2
struct NativeComponent {
  @Param @Require cardData: LayoutParams
  @Local settingInfo: SettingModel = PersistenceV2.connect(SettingModel, () => new SettingModel())!
  @Param showAuthor: boolean = true;
  @Local cardViewModel: CardViewModel = new CardViewModel()

  aboutToAppear(): void {
    this.cardData.nativeCardData = UIUtils.makeObserved(this.cardData.nativeCardData)
  }

  build() {
    Column({ space: CommonConstants.SPACE_S }) {
      AuthorCard({
        cardData: this.cardData,
        isNeedAuthor: !!this.cardData.extraInfo.isNeedAuthor,
      })
      Flex({ justifyContent: FlexAlign.SpaceBetween }) {
        Column({ space: CommonConstants.SPACE_XS }) {
          if (!this.cardData?.extraInfo?.searchKey) {
            Text(this.cardData.nativeCardData?.title)
              .maxLines(2)
              .fontSize(16 * this.settingInfo.fontSizeRatio)
              .textOverflow({ overflow: TextOverflow.Ellipsis })
              .fontWeight(FontWeight.Medium)
              .fontColor($r('sys.color.font_primary'))
          } else {
            Highlight({
              keywords: [this.cardData.extraInfo.searchKey as string],
              sourceString: this.cardData.nativeCardData?.title,
              highLightColor: '#E84026',
              textColor: $r('sys.color.font_primary'),
            })
          }
          Row({ space: 8 }) {
            Text(this.cardData.nativeCardData?.articleFrom)
              .fontSize(12 * this.settingInfo.fontSizeRatio)
              .fontColor($r('sys.color.font_tertiary'))
              .visibility(this.showAuthor ? Visibility.Visible : Visibility.None)
            Text(
              TimeUtils.formatDate(this.cardData.nativeCardData?.createTime, 'YYYY-MM-DD HH:MM'))
              .fontSize(12 * this.settingInfo.fontSizeRatio)
              .fontColor($r('sys.color.font_tertiary'))
          }
          .visibility(this.cardData.extraInfo.isNeedAuthor ? Visibility.None : Visibility.Visible)
        }
        .width('65%')
        .alignItems(HorizontalAlign.Start)

        Column() {
          if (this.cardData.nativeCardData?.postImgList?.length) {
            ForEach(this.cardData.nativeCardData?.postImgList, (item: PostImgList) => {
              ListItem() {
                Column() {
                  if (item.surfaceUrl) {
                    Stack() {
                      Image(item.surfaceUrl)
                        .size({ width: 96, height: 72 })
                        .borderRadius(8)
                        .clip(true)
                      Image($r('app.media.play')).width(43).height(43)
                    }
                  } else {
                    Image(item.picVideoUrl)
                      .size({ width: 96, height: 72 })
                      .borderRadius(8)
                      .clip(true)
                  }
                }
              }
            })
          }
        }
      }
      .onClick(() => {
        this.cardViewModel.pushToNewsDetails(this.cardData)
      })
    }
  }
}