import { CommonConstants } from 'lib_common';
import { HomePageBuilder } from 'business_home';
import { MinePageBuilder } from 'business_mine';
import { VideoPageBuilder } from 'business_video';
import { InteractionPageBuilder } from 'business_interaction';
import { CustomTabBar } from '../components/CustomTabBar';
import { IndexPageViewModel } from '../viewmodels/IndexPageVM';

@Builder
export function IndexPageBuilder() {
  IndexPage()
}

@ComponentV2
struct IndexPage {
  @Local vm: IndexPageViewModel = new IndexPageViewModel();
  @Provider() selectedIndex: number = 0;

  aboutToAppear(): void {
    this.vm.refreshUserInfo();
    this.vm.checkJumpNewsDetail();
  }

  @Monitor('selectedIndex')
  onChangeTabIndex() {
    this.vm.tabModel.selectedIndex = this.selectedIndex;
  }

  build() {
    NavDestination() {
      Stack({ alignContent: Alignment.Bottom }) {
        Tabs({ index: $$this.selectedIndex }) {
          TabContent() {
            HomePageBuilder()
          }
          .padding({
            bottom: this.vm.tabPaddingBottom
          })

          TabContent() {
            VideoPageBuilder()
          }

          TabContent() {
            InteractionPageBuilder()
          }
          .padding({
            bottom: this.vm.tabPaddingBottom
          })

          TabContent() {
            MinePageBuilder()
          }
          .padding({
            bottom: this.vm.tabPaddingBottom
          })
        }
        .width(CommonConstants.FULL_PERCENT)
        .layoutWeight(1)
        .barHeight(0)
        .scrollable(false)
        .onChange((index) => {
          this.selectedIndex = index;
        })

        CustomTabBar({
          fontSizeRatio: this.vm.settingInfo.fontSizeRatio,
        })
          .translate({ x: 0, y: this.vm.translateY })
          .animation({ duration: 200, curve: Curve.EaseInOut })
          .onAreaChange((ov: Area, nv: Area) => {
            this.vm.tabPaddingBottom = nv.height;
            this.vm.tabModel.tabHeight = nv.height
          })
      }
      .height(CommonConstants.FULL_PERCENT)
      .width(CommonConstants.FULL_PERCENT)
    }
    .hideTitleBar(true)
    .onReady((context: NavDestinationContext) => {
      this.vm.onReady(context);
    })
    .onDisAppear(() => {
      this.vm.onDisAppear();
    })
    .onBackPressed(() => {
      return this.vm.onBackPressed();
    })
  }
}
