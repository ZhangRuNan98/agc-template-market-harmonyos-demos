import { AppStorageV2, PersistenceV2 } from '@kit.ArkUI';
import { CommonConstants, Logger, SettingModel, TabModel, TimeUtils, UserInfoModel, WindowModel } from 'lib_common';
import { LoginSheetUtils } from 'lib_account';
import { AVPlayerSession, PlayerLayoutSize, SwipePlayerController, VideoProgressBar } from 'module_swipeplayer';
import { Sidebar } from './Sidebar';
import { CommentController } from '../controller/CommentController';

const TAG = '[VideoLayerView]'

@ComponentV2
export struct VideoLayerView {
  // 视频数据
  @Param @Require videoData: ESObject;
  // 播放会话
  @Param @Require playerSession: AVPlayerSession;
  // 滑动播放控制器
  @Param @Require swipePlayerController: SwipePlayerController
  // 评论页面出现时，改变播放页面的尺寸
  @Param @Require playerLayoutSize: PlayerLayoutSize
  @Local isSliderMoving: boolean = false;

  private commentController: CommentController = new CommentController();

  windowModel: WindowModel = AppStorageV2.connect(WindowModel, () => new WindowModel())!;
  tabModel: TabModel = AppStorageV2.connect(TabModel, () => new TabModel())!;
  settingInfo: SettingModel = PersistenceV2.connect(SettingModel, () => new SettingModel())!;
  userInfoModel: UserInfoModel = PersistenceV2.connect(UserInfoModel, () => new UserInfoModel())!;

  @Monitor('commentController.showComment')
  onVisibleCommentChange(monitor: IMonitor) {
    // 展示评论时，不自动播放下一个视频
    const isAutoPlayNext = !(monitor.value()?.now as boolean)
    this.settingInfo.network.autoPlayNext = isAutoPlayNext
  }

  // 播放、暂停切换
  switchPlayOrPause() {
    let avPlayer = this.swipePlayerController.getAVPlayer()
    let state = avPlayer?.state
    if (state === 'playing') {
      avPlayer?.pause()
      // 当前是视频tab
      if (this.tabModel.selectedIndex === 1) {
        this.tabModel.showTabBar = true
        Logger.debug(TAG, 'tab bar is visible: ' + this.tabModel.showTabBar)
      }
    } else {
      avPlayer?.play()
      // 当前是视频tab
      if (this.tabModel.selectedIndex === 1) {
        this.tabModel.showTabBar = false
        Logger.debug(TAG, 'tab bar is visible: ' + this.tabModel.showTabBar)
      }
    }
  }

  build() {
    RelativeContainer() {
      // 右侧交互操作栏
      Sidebar({
        videoInfo: this.videoData,
        commentController: this.commentController,
        playerLayoutSize: this.playerLayoutSize
      })
        .visibility(this.isSliderMoving ? Visibility.Hidden : Visibility.Visible)
        .alignRules({
          bottom: { anchor: '__container__', align: VerticalAlign.Bottom },
          right: { anchor: '__container__', align: HorizontalAlign.End }
        })
        .offset({ x: -20, y: -100 - (this.tabModel.tabHeight as number) });

      // 底部信息
      Stack({alignContent: Alignment.Bottom}) {
        // 视频信息
        this.videoInfoView()

        Column() {
          // 视频的进度控制器
          VideoProgressBar({
            playerSession: this.playerSession,
            onSlideChange: (flag) => {
              this.isSliderMoving = flag
            }
          })
          // 评论
          this.commentView()
        }
      }
      .width('100%')
      .alignRules({
        bottom: { anchor: '__container__', align: VerticalAlign.Bottom },
        left: { anchor: '__container__', align: HorizontalAlign.Start }
      })
    }
    .id('videoLayerView')
    .width(CommonConstants.FULL_PERCENT)
    .height(CommonConstants.FULL_PERCENT)
    .onClick(() => {
      this.switchPlayOrPause()
    })
    .visibility(this.commentController.showComment ? Visibility.Hidden : Visibility.Visible)
  }

  @Builder
  videoInfoView() {
    Column({space: 4}) {
      Text('@' + this.videoData.author?.authorNickName)
        .fontSize(14)
        .fontColor(Color.White)
        .fontWeight(500)
      Text(this.videoData.title)
        .fontSize(14)
        .fontColor(Color.White)
        .maxLines(2)
        .textOverflow({overflow: TextOverflow.Ellipsis})

      Text(TimeUtils.formatDate(this.videoData.createTime))
        .fontColor('#99ffffff')
        .fontSize(12)
    }
    .width(CommonConstants.FULL_PERCENT)
    .alignItems(HorizontalAlign.Start)
    .padding({left: CommonConstants.PADDING_PAGE, right: CommonConstants.PADDING_PAGE})
    .offset({bottom: 24 + (this.tabModel.tabHeight as number)})
    .visibility(this.isSliderMoving ? Visibility.Hidden : Visibility.Visible)
  }

  @Builder
  commentView() {
    Row() {
      Text('发表评论')
        .fontSize(16)
        .fontColor('#99ffffff')
        .layoutWeight(1)
        .height(40)
        .borderRadius(24)
        .padding({
          left: CommonConstants.PADDING_M,
          top: CommonConstants.PADDING_S,
          right: CommonConstants.PADDING_M,
          bottom: CommonConstants.PADDING_S,
        })
        .backgroundColor('#33ffffff')
        .onClick(() => {
          if (!this.userInfoModel.isLogin) {
            LoginSheetUtils.open()
            return
          }
          this.commentController.open()
        })
    }
    .width(CommonConstants.FULL_PERCENT)
    .padding({
      top: CommonConstants.PADDING_S,
      left: CommonConstants.PADDING_PAGE,
      right: CommonConstants.PADDING_PAGE,
      bottom: this.windowModel.windowBottomPadding
    })
    .backgroundColor(Color.Transparent)
    .visibility(this.isSliderMoving ? Visibility.Hidden : Visibility.Visible)
  }
}

@Builder
export function VideoLayerViewBuilder(
  videoData: ESObject,
  playerSession: AVPlayerSession,
  swipePlayerController: SwipePlayerController,
  playerLayoutSize: PlayerLayoutSize
) {
  VideoLayerView({
    videoData,
    playerSession,
    swipePlayerController,
    playerLayoutSize,
  })
}