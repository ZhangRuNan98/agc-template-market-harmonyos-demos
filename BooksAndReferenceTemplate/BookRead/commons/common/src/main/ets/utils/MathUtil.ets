import cryptoFramework from '@ohos.security.cryptoFramework';
import { GroupBook } from '../model/Book';

export class MathUtil {
  private static readonly INT32_BYTE_SIZE: number = 4;

  public static generateInt32InRange(min: number, max: number): number {
    if (min >= max) {
      return 0;
    }
    min = Math.ceil(min);
    max = Math.floor(max);
    const range: number = max - min;
    const randomValue: bigint = MathUtil.generateRandomNumber(MathUtil.INT32_BYTE_SIZE);
    return Number(randomValue % BigInt(range)) + min;
  }

  public static generateRandomNumber(byteSize: number): bigint {
    try {
      const random: cryptoFramework.Random = cryptoFramework.createRandom();
      const randomBlob: cryptoFramework.DataBlob = random.generateRandomSync(byteSize);
      return MathUtil.arrayToBigInt(randomBlob.data);
    } catch (error) {
      return 0n;
    }
  }

  public static arrayToBigInt(data: Uint8Array): bigint {
    let result: bigint = 0n;
    for (let i = 0; i < data.length; i++) {
      result = (result << 8n) | BigInt(data[i]);
    }
    return result;
  }

  public static sortFav(items: GroupBook[]): Array<GroupBook> {
    return items.sort((a, b) => {
      // 首先比较name字段，有值的排在前面
      const aHasName = a.groupName !== '';
      const bHasName = b.groupName !== '';

      if (aHasName && !bHasName) {
        return -1; // a有name，b没有，a排在前面
      } else if (!aHasName && bHasName) {
        return 1;  // a没有name，b有，b排在前面
      }

      // name状态相同的情况下，比较时间戳，时间更近的排在前面
      return b.timestamp - a.timestamp;
    });
  }

}
