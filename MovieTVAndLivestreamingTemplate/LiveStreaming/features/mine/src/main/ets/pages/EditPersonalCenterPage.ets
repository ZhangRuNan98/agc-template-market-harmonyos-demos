import { NavDestinationModifier, window } from '@kit.ArkUI';
import { Header } from '../component/Header';
import { fileSelect } from '@agctemplate/feed_back';
import { AccountUtil, BarVM, UserInfo } from '@agctemplate/widgets';
import { UserInfoRow } from '../component/UserInfoRow';
import { FunctionalButton, functionalButtonComponentManager } from '@kit.ScenarioFusionKit';
import { Logger } from '@agctemplate/utils';
import { camera } from '@kit.CameraKit';
import { BusinessError } from '@kit.BasicServicesKit';
import { cameraPicker as picker } from '@kit.CameraKit'
import { RouterModule } from '@agctemplate/router_module';

@Builder
export function EditPersonalCenterBuilder() {
  EditPersonalCenter();
}

@ComponentV2
export struct EditPersonalCenter {
  @Local textName: string = '';
  @Local textBio: string = '';
  @Local sex: string = '';
  @Param message: string = 'Hello World';
  @Param iconSheetHeight: number = 287;
  @Param nicknameSheetHeight: number = 744;
  @Local isShowIcon: boolean = false;
  @Local isShowNick: boolean = false;
  @Local isShowSex: boolean = false;
  @Local isShowBio: boolean = false;
  @Local keyboardHeight: number = 0;
  @Local logoUser: UserInfo = AccountUtil.getUserInfo();
  @Local imageUri: Array<string> = [];
  navDestinationModifier: NavDestinationModifier = new NavDestinationModifier()

  aboutToAppear(): void {
    this.sex = this.logoUser.sex
    this.textBio = this.logoUser.bio
    this.textName = this.logoUser.name
    window.getLastWindow(getContext(this)).then(currentWindow => {
      // 监视软键盘的弹出和收起
      currentWindow.on('avoidAreaChange', async data => {
        if (data.type !== window.AvoidAreaType.TYPE_KEYBOARD) {
          return;
        }
        this.keyboardHeight = px2vp(data.area.bottomRect.height);
      })
    })
  }

  @Builder
  myBuilder() {
    Column() {
      Row() {
        Image($r('app.media.close_btn')).size({ width: 40, height: 40 })
          .onClick(() => {
            this.isShowIcon = false
          })
      }.size({ width: '100%', height: 56 })
      .padding({ top: 8, bottom: 8 })
      .justifyContent(FlexAlign.End)

      Column() {
        Row() {
          Image($r('app.media.Mask'))
            .size({ width: 40, height: 40 })
            .margin({ right: 12 })
          Text('使用华为账号头像')
            .height('app.float.vp_21')
            .width('app.float.vp_128')
          Blank()
          Image($r('app.media.iconRight'))
            .size({ width: 24, height: 24 })
        }
        .size({ width: 304, height: 40 })
        .padding({ left: 12, right: 12 })
        .onClick(() => {
          this.logoUser.avatar = $r('app.media.Mask')
          this.isShowIcon = false
          this.showToast('头像修改成功');
        })

        Divider()
          .strokeWidth(0.5)
          .color($r('sys.color.comp_divider'))
          .margin({ top: 13, bottom: 13 })
        Row() {
          Image($r('app.media.ic_public_image_bg'))
            .size({ width: 40, height: 40 })
            .margin({ right: 12 })
          Text('从图库选择')
            .height(21)
            .width(128)
          Blank()
          Image($r('app.media.iconRight'))
            .size({ width: 24, height: 24 })
        }
        .width(304)
        .height(40)
        .padding({ left: 12, right: 12 })
        .onClick(async () => {
          let arr = await fileSelect(this.imageUri, 1)
          if (arr.length === 1) {
            this.logoUser.avatar = arr[arr.length-1]
            this.isShowIcon = false
            this.showToast('头像修改成功');
          }
        })

        Divider()
          .strokeWidth(0.5)
          .color($r('sys.color.comp_divider'))
          .margin({ top: 13, bottom: 13 })
        Row() {
          Image($r('app.media.ic_public_camera_bg'))
            .size({ width: 40, height: 40 })
            .margin({ right: 12 })
          Text('拍照')
            .size({ width: 128, height: 21 })
          Blank()
          Image($r('app.media.iconRight'))
            .size({ width: 24, height: 24 })
        }
        .size({ width: 304, height: 40 })
        .padding({ left: 12, right: 12 })
        .onClick(async () => {
          try {
            let pickerProfile: picker.PickerProfile = {
              cameraPosition: camera.CameraPosition.CAMERA_POSITION_BACK
            }
            let pickerResult: picker.PickerResult = await picker.pick(getContext(this),
              [picker.PickerMediaType.PHOTO, picker.PickerMediaType.VIDEO], pickerProfile)
            if (pickerResult.resultUri && pickerResult.resultUri.length > 0) {
              this.logoUser.avatar = pickerResult.resultUri; // 获取第一个选中的文件 URI
              this.isShowIcon = false
              this.showToast('头像修改成功')
            }
            console.log('the pick pickerResult is:' + JSON.stringify(pickerResult))
          } catch (error) {
            let err = error as BusinessError
            console.error(`the pick call failed. error code: ${err.code}`)
          }
        })
      }
      .borderRadius(16)
      .padding({ top: 16, left: 12, right: 12 })
      .borderRadius(16)
      .backgroundColor($r('sys.color.background_primary'))
      .size({ width: 328, height: 202 })
    }
    .backgroundColor($r('sys.color.background_secondary'))
    .height('100%')
    .width('100%')
    .padding({ top: 8, left: 16, right: 16 })
  }

  @Builder
  myBuilder2() {
    Column() {
      Column() {
        Row() {
          Text('设置昵称')
            .width(80)
            .height(27)
            .fontSize($r('sys.float.Title_S'))
            .fontWeight(FontWeight.Bold)
            .fontColor($r('sys.color.font_primary'))

          Image($r('app.media.close_btn'))
            .size({ width: 40, height: 40 })
            .onClick(() => {
              this.isShowNick = false
            })
        }
        .size({ width: '100%', height: 56 })
        .margin({ top: 8, bottom: 12 })
        .justifyContent(FlexAlign.SpaceBetween)

        TextInput({ text: this.textName, placeholder: '请输入不超过12位的新昵称' },)
          .backgroundColor($r('sys.color.comp_background_primary'))
          .type(InputType.Normal)
          .cancelButton({
            style: CancelButtonStyle.CONSTANT,
            icon: { size: 18, color: $r('sys.color.icon_primary') }
          })
          .onChange((value: string) => {
            this.textName = value;
          })
      }

      Button('确定')
        .borderRadius(20)
        .fontColor($r('sys.color.font_on_primary'))
        .backgroundColor('#EE5D1A')
        .fontSize($r('sys.float.Body_L'))
        .fontWeight(FontWeight.Medium)
        .width(328)
        .height(40)
        .margin({ top: this.keyboardHeight ? 208 : 480 })
        .onClick(() => {
          if (this.textName.trim() !== '' && this.textName.length <= 12) {
            this.logoUser.name = this.textName
            this.showToast('昵称修改成功');
            this.isShowNick = false
          } else if (this.textName.trim() === '') {
            this.showToast('您还未填写');
          } else {
            this.showToast('昵称禁止超过12位');
          }
        })
    }
    .width('100%')
    .height('100%')
    .padding({ top: 8, left: 16, right: 16 })
  }

  @Builder
  myBuilder3() {
    Column() {
      Row() {
        Text('选择性别')
          .width(80)
          .height(27)
          .fontSize($r('sys.float.Title_S'))
          .fontWeight(FontWeight.Bold)
          .fontColor($r('sys.color.font_primary'))

        Image($r('app.media.close_btn')).size({ width: 40, height: 40 })
          .onClick(() => {
            this.isShowSex = false
          })
      }
      .size({ width: '100%', height: 56 })
      .margin({ top: 8, bottom: 12 })
      .justifyContent(FlexAlign.SpaceBetween)

      Row() {
        Radio({ value: 'male', group: 'gender' })
          .checked(this.logoUser.sex === '男')
          .onChange((isChecked: boolean) => {
            if (isChecked) {
              this.sex = '男';
            }
          })
        Text('男')
          .fontSize(16)
          .fontColor($r('sys.color.font_primary'))
      }
      .margin({ bottom: 12 })

      Row() {
        Radio({ value: 'female', group: 'gender' })
          .checked(this.logoUser.sex === '女')
          .onChange((isChecked: boolean) => {
            if (isChecked) {
              this.sex = '女';
            }
          })
        Text('女')
          .fontSize(16)
          .fontColor($r('sys.color.font_primary'))
      }
      .margin({ bottom: 12 })

      Button('确定')
        .borderRadius(20)
        .fontColor($r('sys.color.font_on_primary'))
        .backgroundColor('#EE5D1A')
        .fontSize($r('sys.float.Body_L'))
        .fontWeight(FontWeight.Medium)
        .width(328)
        .height(40)
        .onClick(() => {
          this.logoUser.sex = this.sex
          this.isShowSex = false
        })
    }
    .backgroundColor($r('sys.color.background_secondary'))
    .height('100%').width('100%')
    .padding({ top: 8, left: 16, right: 16 })
  }

  @Builder
  myBuilder4() {
    Column() {
      Column() {
        Row() {
          Text('个性签名')
            .width(80)
            .height(27)
            .fontSize($r('sys.float.Title_S'))
            .fontWeight(FontWeight.Bold)
            .fontColor($r('sys.color.font_primary'))

          Image($r('app.media.close_btn')).size({ width: 40, height: 40 })
            .onClick(() => {
              this.isShowBio = false
            })
        }
        .size({ width: '100%', height: 56 })
        .margin({ top: 8, bottom: 12 })
        .justifyContent(FlexAlign.SpaceBetween)

        Stack({ alignContent: Alignment.BottomEnd }) {
          TextArea({ text: this.textBio, placeholder: '简单介绍一下自己吧~' })
            .size({ width: '100%', height: 156 })
            .maxLength(70)
            .backgroundColor($r('sys.color.comp_background_primary'))
            .onChange((value: string) => {
              this.textBio = value;
            })

          Text(`${this.textBio.length}/70`)
            .fontSize(12)
            .fontColor($r('sys.color.font_secondary'))
            .translate({ x: -12, y: -24 })
        }
        .size({ width: '100%', height: 156 })
      }

      Button('确定')
        .borderRadius(20)
        .fontColor($r('sys.color.font_on_primary'))
        .backgroundColor('#EE5D1A')
        .fontSize($r('sys.float.Body_L'))
        .fontWeight(FontWeight.Medium)
        .width(328)
        .height(40)
        .margin({ top: this.keyboardHeight ? 52 : 324 })
        .onClick(() => {
          if (this.textBio.trim() !== '') {
            this.logoUser.bio = this.textBio
            this.showToast('个性签名设置成功');
            this.isShowBio = false
          } else {
            this.logoUser.bio = '暂无简介'
            this.isShowBio = false
          }
        })
    }
    .width('100%')
    .height('100%')
    .padding({ top: 8, left: 16, right: 16 })
  }

  @Builder
  line() {
    Divider().strokeWidth(0.5).color($r('sys.color.comp_divider')).padding({ left: 12, right: 12 })
  }

  showToast(message: string) {
    try {
      this.getUIContext().getPromptAction().showToast({
        message: message,
        duration: 2000
      });
    } catch (error) {
    }
  }

  build() {
    NavDestination() {
      Column() {
        Header({ title: '个人信息' })
        Column() {
          Column() {
            Row() {
              Text('头像').size({ width: 120, height: 21 })
              Blank()

              Image(this.logoUser.isLogin ?
                this.logoUser.avatar !== '' ? this.logoUser.avatar : $r('app.media.path2x') :
              $r('app.media.person'))
                .size({ width: 40, height: 40 })
                .borderRadius(40)

              Image($r('app.media.iconRight'))
                .size({ width: 24, height: 24 })
            }
            .size({ width: '100%', height: 56 })
            .padding({ left: 12, right: 12 })
            .onClick(() => {
              this.isShowIcon = true;
            })
            .bindSheet($$this.isShowIcon, this.myBuilder(), {
              height: this.iconSheetHeight,
              backgroundColor: $r('sys.color.background_secondary'),
              showClose: false,
              maskColor: $r('sys.color.mask_fourth'),
            })

            this.line()

            UserInfoRow({
              leftTitle: '昵称',
              rightContent: this.logoUser.name,
              rightOnClick: () => {
                this.isShowNick = !this.isShowNick
              }
            })
              .bindSheet($$this.isShowNick, this.myBuilder2(), {
                height: this.nicknameSheetHeight,
                backgroundColor: $r('sys.color.background_secondary'),
                showClose: false,
                maskColor: $r('sys.color.mask_fourth'),
              })

            this.line()

            UserInfoRow({
              leftTitle: '性别',
              rightContent: this.logoUser.sex,
              rightOnClick: () => {
                this.isShowSex = !this.isShowSex
              }
            })
              .bindSheet($$this.isShowSex, this.myBuilder3(), {
                height: this.iconSheetHeight,
                backgroundColor: $r('sys.color.background_secondary'),
                showClose: false,
                maskColor: $r('sys.color.mask_fourth'),
              })

            this.line()

            UserInfoRow({
              leftTitle: '个性签名',
              rightContent: this.logoUser.bio || '暂无简介',
              rightOnClick: () => {
                this.isShowBio = !this.isShowBio
              }
            })
              .bindSheet($$this.isShowBio, this.myBuilder4(), {
                height: this.nicknameSheetHeight,
                backgroundColor: $r('sys.color.background_secondary'),
                showClose: false,
                maskColor: $r('sys.color.mask_fourth'),
              })
          }
          .width('100%')
          .borderRadius(16)
          .margin({ top: 8 })
          .borderRadius(16)
          .backgroundColor($r('sys.color.background_primary'))

          Row() {
            Text('手机号').size({ width: 120, height: 21 })
            Blank()
            Text(this.logoUser.cellphone)
              .size({ width: 80, height: 19 })
              .fontSize($r('sys.float.Body_M'))
              .fontWeight(FontWeight.Regular)
              .fontColor($r('sys.color.font_secondary'))
              .margin({ right: 8 })
          }
          .size({ width: '100%', height: 56 })
          .margin({ top: 12 })
          .backgroundColor($r('sys.color.font_on_primary'))
          .padding(12)
          .borderRadius(16)
        }
        .padding({ left: 16, right: 16 })
        .width('100%')
        .height('100%')
      }
      .alignItems(HorizontalAlign.Start)
      .justifyContent(FlexAlign.Start)
      .width('100%')
      .height('100%')
    }
    .backgroundColor($r('sys.color.background_secondary'))
    .hideTitleBar(true)
    .padding({ top: BarVM.instance.staBarH, bottom: BarVM.instance.aiBarH })
    .attributeModifier(this.navDestinationModifier)
  }
}

